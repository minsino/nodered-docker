[
    {
        "id": "93cdf495.9036b",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "77fea013.7b9e88",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d7301cea.cbcc7",
        "type": "telegram bot",
        "z": "",
        "botname": "wef",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "pollinterval": "300"
    },
    {
        "id": "35e4c4ac.edffac",
        "type": "mongodb3",
        "z": "",
        "uri": "mongodb://192.168.0.110:27017/mqtt",
        "name": "",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "f9dc4321.20798",
        "type": "mongodb3",
        "z": "",
        "uri": "mongodb://172.17.0.4:27017/mqtt",
        "name": "",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "18ef9b72.2144c5",
        "type": "mongodb3",
        "z": "",
        "uri": "mongodb://server-ems-test:27017/mqtt",
        "name": "",
        "options": "",
        "parallelism": "-1"
    },
    {
        "id": "b910c916.64d54",
        "type": "ui_group",
        "z": "",
        "name": "node-ht2",
        "tab": "53af3f0.8076ac",
        "disp": false,
        "width": "29",
        "collapse": false
    },
    {
        "id": "56f4dd48.90550c",
        "type": "ui_group",
        "z": "",
        "name": "node-ht2 #2",
        "tab": "53af3f0.8076ac",
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "53af3f0.8076ac",
        "type": "ui_tab",
        "z": "",
        "name": "Калибровка",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5175804a.3ccf58",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#32b561",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#32b561",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#32b561",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#404040",
                    "edited": true
                },
                "group-borderColor": {
                    "value": "#e1e1e1",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#32b561",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 3,
                "cy": 3,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "32ee18b3.79aa18",
        "type": "mqtt-broker",
        "z": "",
        "name": "",
        "broker": "mqtt-broker.biocad.loc",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "37dd6af9.d54bee",
        "type": "ui_group",
        "z": "",
        "name": "Архив",
        "tab": "53af3f0.8076ac",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3bc87e37.56d972",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 70,
        "y": 440,
        "wires": []
    },
    {
        "id": "c91b78d.5709288",
        "type": "qrdecode",
        "z": "93cdf495.9036b",
        "name": "",
        "x": 420,
        "y": 620,
        "wires": [
            [
                "1a78eeb.7b15f91"
            ]
        ]
    },
    {
        "id": "d606316f.8ec6c8",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 410,
        "y": 700,
        "wires": []
    },
    {
        "id": "1a78eeb.7b15f91",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "msg.payload.chatId = msg.originalMessage.from.id;\nmsg.payload.type = \"message\";\nconst jwt = {\n    token : msg.payload.value\n};\nreturn [ msg, jwt ];",
        "outputs": 2,
        "noerr": 0,
        "x": 410,
        "y": 660,
        "wires": [
            [
                "f08af84e.c3f6a",
                "d606316f.8ec6c8"
            ],
            []
        ]
    },
    {
        "id": "6200070a.6f5658",
        "type": "file in",
        "z": "93cdf495.9036b",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "x": 410,
        "y": 560,
        "wires": [
            [
                "c91b78d.5709288"
            ]
        ]
    },
    {
        "id": "d939c93b.0ff1c",
        "type": "telegram sender",
        "z": "93cdf495.9036b",
        "name": "",
        "bot": "d7301cea.cbcc7",
        "x": 850,
        "y": 240,
        "wires": [
            [
                "9bc1f09d.cba9e"
            ]
        ]
    },
    {
        "id": "f08af84e.c3f6a",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "меню",
        "func": "const { chatId, content = null, type = null } = msg.payload;\nconst userId = `user_${chatId}`;\n\nlet currentState = flow.get(userId, 'status') || { auth: false, layer: 'start' };\nlet newState = {};\n\nconst msgs = [ [ msg ], null, null, null ];\n\nlet opt;\nlet message;\n\nif (content === '/start' || content === 'Отмена') {\n    currentState = {};\n    currentState = { auth: false, layer: 'start' };\n}\n\nconst text = {\n    authCode: 'Введите код доступа\\r\\n',\n    deviceName: 'Отправьте QR-код или пришлите идентификатор\\r\\n',\n    start: 'здравствуйте!\\r\\nДля дальнейшей работы необходимо отправить cвой номер телефона!\\r\\n',\n    requestContact: 'Для отправки cвоего номера телефона нажмите на кнопку ниже или выберите в меню соответствующий пункт\\r\\n',\n    toDashboard: 'Отправлено на Дашборд\\r\\n',\n    deviceOffset: 'Введите смещение:\\r\\n',\n    deviceCalibration: 'Выберите параметр:\\n\\r'\n};\n\nconst keyContact = {\n    reply_markup: JSON.stringify({\n        keyboard: [\n            [{\n                text: 'Отправить свой номер',\n                request_contact: true\n            }],\n            ['Отмена']\n        ],\n        'resize_keyboard': true,\n        'one_time_keyboard': true\n    })\n};\n\nconst changeState = {\n    start: (content) => {\n        opt = keyContact;\n        currentState = {};\n        currentState.auth = false;\n        const toDashboard = { topic: 'removeAll', payload: 'removeAll' };\n        msgs[3] = toDashboard;\n        return {\n            layer: 'requestContact',\n            message: `${msg.originalMessage.from.first_name}, ${text.start}`\n        };\n    },\n    requestContact: (content) => {\n        if (type === 'contact' && chatId === content.user_id) {\n            return {\n                auth: false,\n                layer: 'authCode',\n                message: text.authCode\n               };\n            } else {\n                opt = keyContact;\n                return {\n                    auth: false,\n                    layer: 'requestContact',\n                    message: text.requestContact\n                };\n            }\n    },\n    auth: (content) => {\n        currentState = {};\n        currentState.auth = false;\n\n        return {\n            layer: 'authCode',\n            message: text.authCode\n        };\n    },\n    authCode: (content) => {\n        const user = flow.get('users') || { [chatId] : { code: null } };\n        const code = user[chatId].code;\n        //node.warn(code);\n        if (parseInt(content) === code) {\n            return {\n                auth: true,\n                layer: 'deviceName',\n                message: text.deviceName\n            };\n        } else {\n            return {\n                layer: 'authCode',\n                auth: false,\n                message: text.authCode\n            };\n        }\n    },\n    deviceId: (content) => {\n        return {\n            layer: 'deviceName',\n           message: text.deviceName\n        };\n    },\n    deviceName: (content) => {\n        const deviceId = parseInt(content) || parseInt(msg.payload.value) || 0;\n        msg.payload = { 'id': deviceId };\n        msgs[0] = null;\n        msgs[1] = [msg];\n        return {\n            message : undefined\n        };\n    },\n    deviceParams: (content) => {\n        if (content === 'Калибровка') {\n        opt = {\n            reply_markup: JSON.stringify({\n                keyboard: [...currentState.deviceParams, ['Отмена']],\n                'resize_keyboard': true,\n                'one_time_keyboard': true\n            })\n        };\n        return {\n            layer: 'deviceCalibration',\n            message: text.deviceCalibration\n        };\n        } else if (content === 'Дашборд') {\n           const idToDashboard = { topic: 'add', payload: currentState.deviceId };\n           msgs[3] = idToDashboard;\n        return {\n           layer: 'deviceName',\n           message: `${text.toDashboard}${text.deviceName}`\n        };\n        }\n    },\n    deviceCalibration: (content) => {\n        return {\n            layer: 'deviceOffset',\n            message: text.deviceOffset,\n            calibParam: content\n        };\n    },\n    deviceOffset: (content) => {\n        const userName = `${msg.originalMessage.from.first_name} ${msg.originalMessage.from.last_name}`;\n        msg.payload = {\n            id: currentState.deviceId,\n            ts: parseInt(Date.now() / 1000),\n            offset: parseFloat(content),\n            param: currentState.calibParam,\n            user: userName || chatId,\n            chatId: chatId\n        };\n        msgs[0] = null;\n        msgs[2] = [msg];\n        return {\n            layer : 'deviceId'\n        };\n    }\n};\n\nnewState = changeState[currentState.layer](content || msg.payload.volue || 0);\n\nconst state = Object.assign({}, currentState, newState);\n\nflow.set(userId, state, 'status');\n\nmsg.payload.type = 'message';\nmsg.payload.content = state.message;\nmsg.payload.options = opt;\n\nreturn msgs;",
        "outputs": 4,
        "noerr": 0,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "d939c93b.0ff1c",
                "fb3ed28a.49ed48"
            ],
            [
                "fda38308.33748",
                "fb3ed28a.49ed48"
            ],
            [
                "5b3ee2cc.84dfec",
                "fb3ed28a.49ed48"
            ],
            [
                "28a8d2f1.519aa6"
            ]
        ]
    },
    {
        "id": "9bc1f09d.cba9e",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1010,
        "y": 240,
        "wires": []
    },
    {
        "id": "c475ccd0.829f38",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "const params = {\n    t1: 'Температура',\n    h1: 'Влажность'\n};\n\nconst userId = `user_${msg.originalMessage.chat.id}`;\nconst currentState = flow.get(userId, 'status');\nconst newState = {};\nlet opts = {};\nlet message;\nif (msg.payload === null) {\n  msg.payload = {};\n  message = `Устройство не найдено!\\r\\nОтправьте QR-код или пришлите идентификатор\\r\\n`;\n} else {\n  newState.layer = 'deviceParams';\n  newState.deviceId = msg.payload.id;\n  const arrayButton = (msg.payload.description.params).map(param => [params[param]]);\n  newState.deviceParams = arrayButton;\n  const state = Object.assign({}, currentState, newState)\n  flow.set(userId, state, 'status');\n  const name = `Инв.номер: ${msg.payload.description.num}\\r\\n${msg.payload.description.equ} / ${msg.payload.description.loc}\\r\\n`;\n  opts = {\n    reply_markup: JSON.stringify({\n      keyboard: [\n        ['Калибровка'],\n        ['Дашборд'],\n        ['Отмена']\n      ],\n      'resize_keyboard': true,\n      'one_time_keyboard': true\n    })\n  };\n  message = `${name}\\r\\n`;\n}\nmsg.payload.content = message;\nmsg.payload.options = opts;\nmsg.payload.chatId = msg.originalMessage.chat.id;\nmsg.payload.type = 'message';\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 320,
        "wires": [
            [
                "d939c93b.0ff1c",
                "a3bf82c3.a7e6c8"
            ]
        ]
    },
    {
        "id": "388e9ab3.628f0e",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "msg.payload.content = 'Калибровка успешно завершена!';\nmsg.payload.options = {};\nmsg.payload.chatId = msg.originalMessage.chat.id;\nmsg.payload.type = 'message';\nreturn [ msg ];",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 400,
        "wires": [
            [
                "d939c93b.0ff1c"
            ]
        ]
    },
    {
        "id": "fb3ed28a.49ed48",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "5b3ee2cc.84dfec",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "const params = {\n    'Температура': 't1',\n    'Влажность': 'h1'\n};\n\nconst calibMsg = {};\n\nif (params[msg.payload.param] === 't1') {\n  calibMsg.topic = 'mcu/pk2/ht/' + msg.payload.id + '/calibrate/write/t1';\n} else if (params[msg.payload.param] === 'h1') {\n  calibMsg.topic = 'mcu/pk2/ht/' + msg.payload.id + '/calibrate/write/h1';\n\n}\n\ncalibMsg.payload = {\n         n : 982648,\n    offset : msg.payload.offset,\n      user : msg.payload.chatId,\n        ts : msg.payload.ts,\n};\n\nreturn [ msg, calibMsg ];",
        "outputs": 2,
        "noerr": 0,
        "x": 630,
        "y": 360,
        "wires": [
            [
                "388e9ab3.628f0e",
                "6f61f753.72d598"
            ],
            [
                "75e9947b.b7f87c",
                "5e165efa.c452a8"
            ]
        ]
    },
    {
        "id": "a3bf82c3.a7e6c8",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 830,
        "y": 320,
        "wires": []
    },
    {
        "id": "2ad73a6a.2ddb8e",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1010,
        "y": 380,
        "wires": []
    },
    {
        "id": "668fb4b5.35bbec",
        "type": "telegram receiver",
        "z": "93cdf495.9036b",
        "name": "Telegram",
        "bot": "d7301cea.cbcc7",
        "saveDataDir": "/data/qr",
        "x": 80,
        "y": 240,
        "wires": [
            [
                "982bc477.4d5e78",
                "bdea7aa3.67ec18",
                "8bc90e23.a7ee6"
            ],
            [
                "bdea7aa3.67ec18"
            ]
        ]
    },
    {
        "id": "982bc477.4d5e78",
        "type": "switch",
        "z": "93cdf495.9036b",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "message",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "photo",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "contact",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "f08af84e.c3f6a",
                "7b40782a.60548"
            ],
            [
                "d47519eb.990e",
                "7b40782a.60548"
            ],
            [
                "f08af84e.c3f6a",
                "7b40782a.60548"
            ],
            [
                "7b40782a.60548"
            ]
        ]
    },
    {
        "id": "d47519eb.990e",
        "type": "change",
        "z": "93cdf495.9036b",
        "name": "filename",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload.path",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 520,
        "wires": [
            [
                "6200070a.6f5658"
            ]
        ]
    },
    {
        "id": "75e9947b.b7f87c",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 830,
        "y": 480,
        "wires": []
    },
    {
        "id": "bdea7aa3.67ec18",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "msg.payload.originalMessage = msg.originalMessage;\nmsg.payload.ts = new Date();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 70,
        "y": 360,
        "wires": [
            [
                "cdc9032.784a6"
            ]
        ]
    },
    {
        "id": "8bc90e23.a7ee6",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 70,
        "y": 200,
        "wires": []
    },
    {
        "id": "7b40782a.60548",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 430,
        "y": 120,
        "wires": []
    },
    {
        "id": "fda38308.33748",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "const devices = {\n    640950 : {\n      id: 640950,\n      description: {\n      equ: 'Biocad Node-HT2',\n      loc: 'ПК2',\n      num: 'МЦ-640950',\n      params: ['t1', 'h1']\n      }\n    },\n    3410807 : {\n      id: 3410807,\n      description: {\n      equ: 'Biocad Node-HT2',\n      loc: 'ОПЛ',\n      num: 'МЦ-1108855',\n      params: ['t1', 'h1']\n      }\n    },\n};\nmsg.payload = devices[msg.payload.id] || null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 280,
        "wires": [
            [
                "c475ccd0.829f38"
            ]
        ]
    },
    {
        "id": "6f61f753.72d598",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "DB calib",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 840,
        "y": 380,
        "wires": [
            [
                "2ad73a6a.2ddb8e"
            ]
        ]
    },
    {
        "id": "cdc9032.784a6",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "DB calib",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 80,
        "y": 400,
        "wires": [
            [
                "3bc87e37.56d972"
            ]
        ]
    },
    {
        "id": "e3a8a604.da0fe8",
        "type": "catch",
        "z": "93cdf495.9036b",
        "name": "",
        "scope": null,
        "x": 280,
        "y": 80,
        "wires": [
            [
                "ff81c371.18f768"
            ]
        ]
    },
    {
        "id": "ff81c371.18f768",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "168efcc2.3f61eb",
        "type": "inject",
        "z": "93cdf495.9036b",
        "name": "",
        "topic": "env",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 840,
        "y": 40,
        "wires": [
            [
                "17062b75.ffba75"
            ]
        ]
    },
    {
        "id": "cdc6323f.73138",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 1150,
        "y": 60,
        "wires": []
    },
    {
        "id": "17062b75.ffba75",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "msg.payload = `${HTTP_PROXY}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 140,
        "wires": [
            [
                "cdc6323f.73138"
            ]
        ]
    },
    {
        "id": "68cae252.1434dc",
        "type": "inject",
        "z": "93cdf495.9036b",
        "name": "",
        "topic": "",
        "payload": "{\"206314215\":{\"userId\":206314215,\"code\":102938}}",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 150,
        "y": 840,
        "wires": [
            [
                "61de7af.aaaac04"
            ]
        ]
    },
    {
        "id": "8850783c.6064d",
        "type": "debug",
        "z": "93cdf495.9036b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 850,
        "y": 840,
        "wires": []
    },
    {
        "id": "61de7af.aaaac04",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "const users = flow.get('users') || {};\nflow.set('users', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 840,
        "wires": [
            [
                "8850783c.6064d"
            ]
        ]
    },
    {
        "id": "5e93bd13.aa83ec",
        "type": "inject",
        "z": "93cdf495.9036b",
        "name": "",
        "topic": "remove",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 190,
        "y": 900,
        "wires": [
            [
                "bf54a2c1.24ed78"
            ]
        ]
    },
    {
        "id": "bf54a2c1.24ed78",
        "type": "function",
        "z": "93cdf495.9036b",
        "name": "",
        "func": "const users = flow.get('users') || {};\nflow.set('users', undefined);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 900,
        "wires": [
            [
                "8850783c.6064d"
            ]
        ]
    },
    {
        "id": "786bf7a7.8352e8",
        "type": "function",
        "z": "77fea013.7b9e88",
        "name": "",
        "func": "const temp = {};\nconst humi = {};\n\nconst { id = null, t1 = null, h1 = null } = msg.payload;\n\nif (id) {\n    \n  temp.topic   = `${id} температура`;\n  temp.payload = t1;\n  humi.topic   = `${id} влажность`;\n  humi.payload = h1; \n  \n}\nreturn [ temp, humi ];",
        "outputs": 2,
        "noerr": 0,
        "x": 850,
        "y": 540,
        "wires": [
            [
                "a3f21917.7e2208"
            ],
            [
                "1a1e7b6c.fbbe15"
            ]
        ]
    },
    {
        "id": "d1ec0e68.49377",
        "type": "ui_ui_control",
        "z": "77fea013.7b9e88",
        "name": "",
        "x": 760,
        "y": 200,
        "wires": [
            [
                "904679f1.f53ce"
            ]
        ]
    },
    {
        "id": "904679f1.f53ce",
        "type": "debug",
        "z": "77fea013.7b9e88",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "ea3a0950.bcb6c",
        "type": "function",
        "z": "77fea013.7b9e88",
        "name": "",
        "func": "const groupsName = {\n    \"Калибровка_node-ht2\":null\n    \n}\n\nlet nameGroup = [];\n\nfunction show(name) {\n    return {\n        group: {\n        show:name,\n        focus:true\n    }\n  }\n}\n\nfunction hide(name) {\n    return {\n        group: {\n          hide:name,\n          focus:true\n    }\n  }\n}\n\nconst update = { payload: {\"tab\":\"\"} };\n\nlet groups  = flow.get('groups') || groupsName;\n\nfunction add() {\n    for (let group in groups) {\n    if (!groups[group] || groups[group] === msg.payload ) {\n        groups[group] = msg.payload;\n        nameGroup.push(group);\n        msg.payload = show(nameGroup);\n        return;\n    }\n  }\n}\n\nfunction remove() {\n    for (let group in groups) {\n    if (groups[group] === msg.payload) {\n        groups[group] = null;\n        nameGroup.push(group);\n        msg.payload = hide(nameGroup);\n        return;\n    }\n  }\n}\n\nfunction removeAll() {\n    for (let group in groups) {\n        groups[group] = null;\n        nameGroup.push(group);\n        msg.payload = hide(nameGroup);\n  }\n}\n\nif (msg.topic === 'removeAll') {\n    groups = groupsName;\n    removeAll();\n} else if (msg.topic === 'add') {\n    add();\n} else if (msg.topic === 'remove') {\n    remove();\n}\n\nflow.set('groups', groups);\n\nreturn [ update, msg ];",
        "outputs": 2,
        "noerr": 0,
        "x": 530,
        "y": 200,
        "wires": [
            [
                "2293fb81.e5e444",
                "d1ec0e68.49377"
            ],
            [
                "2293fb81.e5e444",
                "d1ec0e68.49377"
            ]
        ]
    },
    {
        "id": "51213702.7ee7b8",
        "type": "inject",
        "z": "77fea013.7b9e88",
        "name": "",
        "topic": "removeAll",
        "payload": "removeAll",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "x": 330,
        "y": 240,
        "wires": [
            [
                "ea3a0950.bcb6c"
            ]
        ]
    },
    {
        "id": "2293fb81.e5e444",
        "type": "debug",
        "z": "77fea013.7b9e88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "535eb5ee.99cc64",
        "type": "function",
        "z": "77fea013.7b9e88",
        "name": "",
        "func": "const groupsOut = {\n    \"Home_node-ht2_#1\": 0,\n    \"Home_node-ht2_#2\": 1\n    \n};\n\nlet msgs = [null, null];\n\nlet groups  = flow.get('groups');\n\nfunction check() {\n    for (let group in groups) {\n    if (groups[group] === msg.payload.id ) {\n        return groupsOut[group];\n    }\n  }\n}\nconst num = check();\nmsgs[num] = msg;\nreturn [ msgs[0], msgs[1] ];",
        "outputs": 2,
        "noerr": 0,
        "x": 630,
        "y": 480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a3f21917.7e2208",
        "type": "ui_chart",
        "z": "77fea013.7b9e88",
        "name": "",
        "group": "b910c916.64d54",
        "order": 1,
        "width": "29",
        "height": "5",
        "label": "Температура",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "ожидание данных",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 1020,
        "y": 500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "28a8d2f1.519aa6",
        "type": "link out",
        "z": "93cdf495.9036b",
        "name": "toDash",
        "links": [
            "204a3e7e.17603a",
            "bfc05c07.e9c0a8"
        ],
        "x": 575,
        "y": 440,
        "wires": []
    },
    {
        "id": "204a3e7e.17603a",
        "type": "link in",
        "z": "77fea013.7b9e88",
        "name": "fromBot",
        "links": [
            "28a8d2f1.519aa6"
        ],
        "x": 395,
        "y": 200,
        "wires": [
            [
                "ea3a0950.bcb6c",
                "d42fce76.c908f"
            ]
        ]
    },
    {
        "id": "7e2f2950.176ec8",
        "type": "json",
        "z": "77fea013.7b9e88",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 540,
        "wires": [
            [
                "1ad0e9d1.baacbe",
                "786bf7a7.8352e8"
            ]
        ]
    },
    {
        "id": "1ad0e9d1.baacbe",
        "type": "debug",
        "z": "77fea013.7b9e88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 470,
        "y": 500,
        "wires": []
    },
    {
        "id": "4759891c.d81fa",
        "type": "mqtt in",
        "z": "77fea013.7b9e88",
        "name": "",
        "topic": "spb/pk2/ht/+/status",
        "qos": "0",
        "broker": "32ee18b3.79aa18",
        "x": 210,
        "y": 540,
        "wires": [
            [
                "7e2f2950.176ec8"
            ]
        ]
    },
    {
        "id": "d42fce76.c908f",
        "type": "debug",
        "z": "77fea013.7b9e88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "168d5815.5b5c68",
        "type": "function",
        "z": "77fea013.7b9e88",
        "name": "",
        "func": "const groupsOut = {\n    \"Home_node-ht2_#1\": 0,\n    \"Home_node-ht2_#2\": 1\n    \n};\n\nlet msgs = [null, null];\n\nlet groups  = flow.get('groups');\n\nfunction check() {\n    for (let group in groups) {\n    if (groups[group] === msg.payload.id ) {\n        return groupsOut[group];\n    }\n  }\n}\nconst num = check();\nmsgs[num] = msg;\nreturn [ msgs[0], msgs[1] ];",
        "outputs": 2,
        "noerr": 0,
        "x": 630,
        "y": 760,
        "wires": [
            [
                "4d83a3f7.84748c",
                "7c165f2f.e244a"
            ],
            [
                "27bb2751.25ee98",
                "f066a080.8056a"
            ]
        ]
    },
    {
        "id": "3856c3f5.30fb14",
        "type": "json",
        "z": "77fea013.7b9e88",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 760,
        "wires": [
            [
                "168d5815.5b5c68",
                "24e2d926.61966e"
            ]
        ]
    },
    {
        "id": "24e2d926.61966e",
        "type": "debug",
        "z": "77fea013.7b9e88",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 470,
        "y": 720,
        "wires": []
    },
    {
        "id": "7431f44.d3a690c",
        "type": "mqtt in",
        "z": "77fea013.7b9e88",
        "name": "",
        "topic": "spb/pk2/ht/+/config",
        "qos": "0",
        "broker": "32ee18b3.79aa18",
        "x": 210,
        "y": 760,
        "wires": [
            [
                "3856c3f5.30fb14"
            ]
        ]
    },
    {
        "id": "4d83a3f7.84748c",
        "type": "debug",
        "z": "77fea013.7b9e88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 670,
        "y": 700,
        "wires": []
    },
    {
        "id": "27bb2751.25ee98",
        "type": "debug",
        "z": "77fea013.7b9e88",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 670,
        "y": 820,
        "wires": []
    },
    {
        "id": "7c165f2f.e244a",
        "type": "function",
        "z": "77fea013.7b9e88",
        "name": "",
        "func": "const temp = {\n    topic: new Date(msg.payload.calib.t1.ts*1000).toLocaleString(),\n    payload: msg.payload.calib.t1.offset\n    };\nconst humi = {\n    topic: new Date(msg.payload.calib.h1.ts*1000).toLocaleString(),\n    payload: msg.payload.calib.h1.offset\n    };\n\nreturn [ temp, humi ];",
        "outputs": 2,
        "noerr": 0,
        "x": 830,
        "y": 740,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f066a080.8056a",
        "type": "function",
        "z": "77fea013.7b9e88",
        "name": "",
        "func": "const temp = {\n    topic: new Date(msg.payload.calib.t1.ts*1000).toLocaleString(),\n    payload: msg.payload.calib.t1.offset\n    };\nconst humi = {\n    topic: new Date(msg.payload.calib.h1.ts*1000).toLocaleString(),\n    payload: msg.payload.calib.h1.offset\n    };\n\nreturn [ temp, humi ];",
        "outputs": 2,
        "noerr": 0,
        "x": 830,
        "y": 800,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5e165efa.c452a8",
        "type": "mqtt out",
        "z": "93cdf495.9036b",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "32ee18b3.79aa18",
        "x": 830,
        "y": 420,
        "wires": []
    },
    {
        "id": "b05d6baa.dbb37",
        "type": "inject",
        "z": "77fea013.7b9e88",
        "name": "",
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 850,
        "y": 460,
        "wires": [
            [
                "a3f21917.7e2208"
            ]
        ]
    },
    {
        "id": "1a1e7b6c.fbbe15",
        "type": "ui_chart",
        "z": "77fea013.7b9e88",
        "name": "",
        "group": "b910c916.64d54",
        "order": 1,
        "width": "29",
        "height": "5",
        "label": "Влажность",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "bezier",
        "nodata": "ожидание данных",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "useOldStyle": false,
        "x": 1010,
        "y": 560,
        "wires": [
            [],
            []
        ]
    }
]
